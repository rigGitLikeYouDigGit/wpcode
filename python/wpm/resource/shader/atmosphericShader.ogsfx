/*
all in one shader for treatment of sky
position in solar system is broken down into layers of stars, planets, atmosphere etc,
with final options for environment-specific cubemaps to be added on top

I have no idea how to marry this to IBL - worst case scenario, we just render out
a sequence of images from this

*/
# version 430

#define OGSFX 1

#define HIDE_OGSFX_UNIFORMS 0
#define HIDE_OGSFX_STREAMS 1
#define HIDE_OGSFX_CODE 1

#include "atmosphericShaderVertex.glsl"
#include "atmosphericShaderFragment.glsl"

uniform float focalLength;

uniform texture2D ScreenImage;
uniform sampler2D ScreenImageSampler <string UIGroup="Textures";>= sampler_state
{
	Texture = <ScreenImage>;
	TEXTURE_MIN_FILTER = NEAREST;
	TEXTURE_MAG_FILTER = NEAREST;
	TEXTURE_WRAP_S = REPEAT;
	TEXTURE_WRAP_T = REPEAT;
	TEXTURE_WRAP_R = REPEAT;
};


uniform bool debugColours <string UIGroup="Main";> = False;

// star params
uniform texture2D StarImage;
uniform sampler2D StarImageSampler <string UIGroup="starParams";>= sampler_state
{
	Texture = <StarImage>;
	TEXTURE_MIN_FILTER = NEAREST;
	TEXTURE_MAG_FILTER = NEAREST;
	TEXTURE_WRAP_S = REPEAT;
	TEXTURE_WRAP_T = REPEAT;
	TEXTURE_WRAP_R = REPEAT;
};
uniform float starBrightness <string UIGroup="starParams";>=1.0;
uniform float starTwinkle <string UIGroup="starParams";>=1.0;
uniform float starCutoff <string UIGroup="starParams";>=1.0;

// atmosphere params
uniform float atmosphereHeight <string UIGroup="atmosphereParams";>;

// ray settings
uniform float rayStep <string UIGroup="rayStep";>=1.0;
uniform float globalScale <string UIGroup="rayStep";>=1.0;

// viewpoint transform
// can't find a way to pass in matrices directly, so this has to do
uniform vec3 viewOrientX <string UIGroup="viewpointTransform";>;
uniform vec3 viewOrientY <string UIGroup="viewpointTransform";>;
uniform vec3 viewOrientZ <string UIGroup="viewpointTransform";>;
uniform vec3 viewPos <string UIGroup="viewpointTransform";>;
// viewPosition is a reserved name, woops



// code definition

#define HIDE_OGSFX_UNIFORMS 1
#define HIDE_OGSFX_STREAMS 0
#define HIDE_OGSFX_CODE 1

#include "atmosphericShaderVertex.glsl"
#include "atmosphericShaderFragment.glsl"


//**********

#define HIDE_OGSFX_UNIFORMS 1
#define HIDE_OGSFX_STREAMS 1
#define HIDE_OGSFX_CODE 0



// link main files
GLSLShader VS {
#include "atmosphericShaderVertex.glsl"
}

GLSLShader FS {
  #include "atmosphericShaderFragment.glsl"
}


// define technique
technique Main
<
//tell Maya to support transparency for this technique
//string Transparency = "Transparent";

// Disable consolidation -- the displacement uses the World matrix which is modified when the consolidation is active
string handlesConsolidatedGeometry = "false";
>
{


  // eye passes
  pass p0 { VertexShader (in appdata, out vertexOutput) = VS;
    PixelShader (in vertexOutput, out fragmentOutput) = FS;
  }
}
