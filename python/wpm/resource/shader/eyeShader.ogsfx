// maya-facing front end to super-duper WePresent eye shader
// we will attempt not to pollute the pure glsl code too much

# version 430


#define VERTEXPATH <"eyeShaderVertex.glsl">
#define FRAGMENTPATH "eyeShaderFragment.glsl"
// tragically cannot get this to work
// brutality it is, then

#define OGSFX 1

// look at this repulsive code
#define HIDE_OGSFX_UNIFORMS 0
#define HIDE_OGSFX_STREAMS 1
#define HIDE_OGSFX_CODE 1

#include "eyeShaderVertex.glsl"
#include "eyeShaderFragment.glsl"
#include "screenCoordShader.glsl"

// test defining colour maps outside glsl files
uniform texture2D ScleraDiffuseMap;
uniform texture2D IrisDiffuseMap;
uniform texture2D IrisHeightMap;

uniform sampler2D ScleraDiffuseSampler <string UIGroup="Textures";>= sampler_state
{
	Texture = <ScleraDiffuseMap>;
	TEXTURE_MIN_FILTER = NEAREST;
	TEXTURE_MAG_FILTER = NEAREST;
	TEXTURE_WRAP_S = REPEAT;
	TEXTURE_WRAP_T = REPEAT;
	TEXTURE_WRAP_R = REPEAT;
};
uniform sampler2D IrisHeightSampler <string UIGroup="Textures";>= sampler_state
{
	Texture = <IrisHeightMap>;
	TEXTURE_MIN_FILTER = NEAREST;
	TEXTURE_MAG_FILTER = NEAREST;
	TEXTURE_WRAP_S = REPEAT;
	TEXTURE_WRAP_T = REPEAT;
	TEXTURE_WRAP_R = REPEAT;
};
uniform sampler2D IrisDiffuseSampler <string UIGroup="Textures";>= sampler_state
{
	Texture = <IrisDiffuseMap>;
	TEXTURE_MIN_FILTER = NEAREST;
	TEXTURE_MAG_FILTER = NEAREST;
	TEXTURE_WRAP_S = REPEAT;
	TEXTURE_WRAP_T = REPEAT;
	TEXTURE_WRAP_R = REPEAT;
};

// test defining all uniform params in one place
// physical parametres

uniform float cornealHeight <string UIGroup="Main";>= 0.2;
uniform float irisDepth <string UIGroup="Main";>= 0.1;
uniform float irisWidth <string UIGroup="Main";>= 0.3;
uniform float irisDipStart <string UIGroup="Main";>= 0.15;
uniform float irisDipEnd <string UIGroup="Main";>= 1.0;

uniform float pupilDilation <string UIGroup="Main";>= 0.0;
uniform float pupilBaseWidth <string UIGroup="Main";>= 0.07;
uniform float limbalWidth <string UIGroup="Main";>= 0.05;


// refraction parametres
uniform float iorBase <string UIGroup="Main";>= 1.2;
uniform float iorRange <string UIGroup="Main";>= 0.1;

uniform bool debugColours <string UIGroup="Main";> = False;


// spherical sdf markers, to be given as translations in sphere space
uniform float eyeMaskWeight <
    string UIGroup = "Shadow SDF settings"; > ;
uniform float eyeMaskSmooth <
    string UIGroup = "Shadow SDF settings"; > ;

uniform vec3 upperVector <
    string UIGroup = "Shadow SDF settings"; > ;

uniform float upperRadius <
    float UIMin = 0; float UIMax = 1.0;
    string UIGroup = "Shadow SDF settings"; > = 0.1;

uniform vec3 lowerVector <
    string UIGroup = "Shadow SDF settings"; > ;

uniform float lowerRadius <
    float UIMin = 0; float UIMax = 1.0;
    string UIGroup = "Shadow SDF settings"; > = 0.1;

uniform vec3 caruncleVector <
    string UIGroup = "Shadow SDF settings"; > ;

uniform float caruncleRadius <
    float UIMin = 0; float UIMax = 1.0;
    string UIGroup = "Shadow SDF settings"; > = 0.1;

uniform float caruncleSmooth <
    float UIMin = 0; float UIMax = 0.05;
    string UIGroup = "Shadow SDF settings"; > = 0.01;






// yes, we actually need to micromanage what gets read when
// so maya doesn't have a seizure when it defines things
// in the wrong order
// please god let there be a better way

#define HIDE_OGSFX_UNIFORMS 1
#define HIDE_OGSFX_STREAMS 0
#define HIDE_OGSFX_CODE 1

#include "eyeShaderVertex.glsl"
#include "eyeShaderFragment.glsl"
#include "screenCoordShader.glsl"


//**********
//	Code handling:
//
//	We need to load the vertex stage and fragment stage in two
//	different GLSLShader blocks in order to specify them in the
//	technique definition below:
//

#define HIDE_OGSFX_UNIFORMS 1
#define HIDE_OGSFX_STREAMS 1
#define HIDE_OGSFX_CODE 0



// link main files
GLSLShader VS {
#include "eyeShaderVertex.glsl"
}

GLSLShader FS {
  #include "eyeShaderFragment.glsl"
}

// test
GLSLShader ScreenUV {
    # include "screenCoordShader.glsl"
}

GLSLShader PassVertex {
    void main(){

    }
}


// define technique
technique Main
<
//tell Maya to support transparency for this technique
string Transparency = "Transparent";

// Disable consolidation -- the displacement uses the World matrix which is modified when the consolidation is active
string handlesConsolidatedGeometry = "false";
>
{

  // screenspace pass
  pass p0 {
    VertexShader ( in appdata, out vertexOutput ) = VS;
    PixelShader ( out fragmentOutput) = ScreenUV;
  }

  // eye passes
  pass p1 { VertexShader (in appdata, out vertexOutput) = VS;
    PixelShader (in vertexOutput, out fragmentOutput) = FS;
  }
}
